import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { fetchSystemInfo } from '../services/api';

// Neovim-inspired theme colors
const THEME = {
  // Base colors
  bg: {
    primary: '#1e1e2e',    // Main background (like Neovim's background)
    secondary: '#181825',  // Secondary background (like Neovim's statusline)
    tertiary: '#313244',   // Tertiary background (like Neovim's visual selection)
  },
  fg: {
    primary: '#cdd6f4',    // Primary text (like Neovim's foreground)
    secondary: '#a6adc8',  // Secondary text (like Neovim's comment)
    muted: '#6c7086',      // Muted text (like Neovim's line numbers)
  },
  accent: {
    blue: '#89b4fa',       // Like Neovim's blue
    green: '#a6e3a1',      // Like Neovim's green
    red: '#f38ba8',        // Like Neovim's red
    yellow: '#f9e2af',     // Like Neovim's yellow
    purple: '#cba6f7',     // Like Neovim's purple
    orange: '#fab387',     // Like Neovim's orange
  },
  border: {
    primary: '#313244',    // Primary border color
    secondary: '#45475a',  // Secondary border color
  }
};

interface SystemInfo {
  system: {
    hostname: string;
    baseInstall: string;
    kernel: string;
    bootloader: string;
    loginManager: string;
    font: string;
    theme: string;
    iconTheme: string;
    cursorTheme: string;
  };
  users: string[];
  drivers: {
    graphics: string;
    audio: string;
  };
  packages: {
    coreOsUtilities: string[];
    extraUtilities: string[];
    webBrowsers: string[];
    textEditors: string[];
    launchers: string[];
    applications: string[];
  };
  themes: {
    fonts: string[];
    themes: string[];
    iconThemes: string[];
    cursorThemes: string[];
  };
}

interface User {
  id: string;
  username: string;
  isRoot: boolean;
}

interface AppContextType {
  systemInfo: SystemInfo;
  entries: any[];
  users: User[];
  addUser: (user: Omit<User, 'id'>) => void;
  removeUser: (username: string) => void;
  theme: typeof THEME;
  refreshSystemInfo: () => Promise<void>;
  addEntry: (entry: any) => void;
  generateInstallScript: (categories?: string[]) => string;
}

const defaultSystemInfo: SystemInfo = {
  system: {
    hostname: 'Loading...',
    baseInstall: 'Loading...',
    kernel: 'Loading...',
    bootloader: 'Loading...',
    loginManager: 'Loading...',
    font: 'Loading...',
    theme: 'Loading...',
    iconTheme: 'Loading...',
    cursorTheme: 'Loading...'
  },
  users: [],
  drivers: {
    graphics: 'Loading...',
    audio: 'Loading...'
  },
  packages: {
    coreOsUtilities: [],
    extraUtilities: [],
    webBrowsers: [],
    textEditors: [],
    launchers: [],
    applications: []
  },
  themes: {
    fonts: [],
    themes: [],
    iconThemes: [],
    cursorThemes: []
  }
};

const AppContext = createContext<AppContextType | undefined>(undefined);

export function AppProvider({ children }: { children: ReactNode }) {
  const [systemInfo, setSystemInfo] = useState<SystemInfo>(defaultSystemInfo);
  const [entries, setEntries] = useState<any[]>([]);
  const [users, setUsers] = useState<User[]>([]);

  const loadSystemInfo = async () => {
    const info = await fetchSystemInfo();
    setSystemInfo(info);
  };

  useEffect(() => {
    loadSystemInfo();
  }, []);

  const refreshSystemInfo = async () => {
    await loadSystemInfo();
  };

  const addUser = (user: Omit<User, 'id'>) => {
    setUsers(prev => [...prev, { ...user, id: Math.random().toString(36).substr(2, 9) }]);
  };

  const removeUser = (username: string) => {
    setUsers(prev => prev.filter(user => user.username !== username));
  };

  const addEntry = (entry: any) => {
    setEntries(prev => [...prev, { ...entry, id: Math.random().toString(36).substr(2, 9) }]);
  };

  const generateInstallScript = (categories?: string[]) => {
    // Filter entries by selected categories if provided
    const filteredEntries = categories 
      ? entries.filter(entry => categories.includes(entry.category))
      : entries;

    // Generate the script content
    const script = `#!/bin/bash

# Generated by Arch Linux System Manager
# ${new Date().toLocaleString()}

# Update system
sudo pacman -Syu --noconfirm

# Install packages
sudo pacman -S --noconfirm \\
${filteredEntries.map(entry => `  ${entry.package}`).join(' \\\n')}

echo "Installation complete!"
`;

    return script;
  };

  const value = {
    systemInfo,
    entries,
    users,
    addUser,
    removeUser,
    theme: THEME,
    refreshSystemInfo,
    addEntry,
    generateInstallScript
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}

export function useApp() {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}